basePath: /api
definitions:
  logistics-app_backend_internal_domain.Address:
    properties:
      city:
        type: string
      coordinate_id:
        type: integer
      country:
        type: string
      created_at:
        type: string
      customer_id:
        type: integer
      exterior_number:
        type: string
      id:
        type: integer
      interior_number:
        type: string
      is_active:
        type: boolean
      neighborhood:
        type: string
      postal_code:
        type: string
      state:
        type: string
      street:
        type: string
      updated_at:
        type: string
    type: object
  logistics-app_backend_internal_domain.Order:
    properties:
      actual_weight_kg:
        type: number
      created_at:
        type: string
      created_by:
        type: integer
      customer_id:
        type: integer
      destination_address_id:
        type: integer
      id:
        type: integer
      internal_notes:
        type: string
      observations:
        type: string
      order_number:
        type: string
      origin_address_id:
        type: integer
      package_type_id:
        type: integer
      quantity:
        type: integer
      status:
        $ref: '#/definitions/logistics-app_backend_internal_domain.OrderStatus'
      updated_at:
        type: string
      updated_by:
        type: integer
    type: object
  logistics-app_backend_internal_domain.OrderDetail:
    properties:
      actual_weight_kg:
        type: number
      ad_city:
        type: string
      ad_exterior:
        type: string
      ad_neighborhood:
        type: string
      ad_postal:
        type: string
      ad_street:
        type: string
      ao_city:
        type: string
      ao_exterior:
        type: string
      ao_neighborhood:
        type: string
      ao_postal:
        type: string
      ao_street:
        type: string
      created_at:
        type: string
      destination_address_id:
        type: integer
      full_name:
        type: string
      id:
        type: integer
      internal_notes:
        type: string
      observations:
        type: string
      order_number:
        type: string
      origin_address_id:
        type: integer
      package_type_id:
        type: integer
      quantity:
        type: integer
      size_code:
        $ref: '#/definitions/logistics-app_backend_internal_domain.PackageSize'
      status:
        $ref: '#/definitions/logistics-app_backend_internal_domain.OrderStatus'
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  logistics-app_backend_internal_domain.OrderListItem:
    properties:
      actual_weight_kg:
        type: number
      created_at:
        type: string
      destination_full_address:
        type: string
      full_name:
        type: string
      id:
        type: integer
      order_number:
        type: string
      origin_full_address:
        type: string
      quantity:
        type: integer
      size_code:
        $ref: '#/definitions/logistics-app_backend_internal_domain.PackageSize'
      status:
        $ref: '#/definitions/logistics-app_backend_internal_domain.OrderStatus'
    type: object
  logistics-app_backend_internal_domain.OrderStatus:
    enum:
    - created
    - collected
    - in_station
    - in_route
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - OrderCreated
    - OrderCollected
    - OrderInStation
    - OrderInRoute
    - OrderDelivered
    - OrderCancelled
  logistics-app_backend_internal_domain.PackageSize:
    enum:
    - S
    - M
    - L
    - XL
    type: string
    x-enum-varnames:
    - PackageS
    - PackageM
    - PackageL
    - PackageXL
  logistics-app_backend_internal_domain.PackageType:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      max_weight_kg:
        type: number
      size_code:
        $ref: '#/definitions/logistics-app_backend_internal_domain.PackageSize'
    type: object
  logistics-app_backend_internal_domain.Role:
    enum:
    - client
    - admin
    type: string
    x-enum-varnames:
    - RoleClient
    - RoleAdmin
  logistics-app_backend_internal_domain.User:
    properties:
      created_at:
        type: string
      default_address_id:
        type: integer
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      phone:
        type: string
      role:
        $ref: '#/definitions/logistics-app_backend_internal_domain.Role'
      updated_at:
        type: string
      updated_by:
        type: integer
    type: object
info:
  contact:
    email: armin.cetina.mac@gmail.com
    name: Armin Cetina Mac
  description: Backend de log√≠stic App.
  title: Logistics API
  version: "1.0"
paths:
  /addresses:
    get:
      description: Clients see only their addresses (active by default). Admins can
        pass ?all=1 to see all, and ?include_inactive=1 to include inactive.
      parameters:
      - description: 'Admin only: if set to 1, list all users'' addresses'
        in: query
        name: all
        type: string
      - description: 'Admin only: if set to 1, include inactive addresses'
        in: query
        name: include_inactive
        type: string
      - description: Represent customer ID; if set, only addresses for this customer
          are returned
        in: query
        name: customer_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/logistics-app_backend_internal_domain.Address'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List addresses
      tags:
      - addresses
    post:
      consumes:
      - application/json
      description: Creates coordinates first if provided, then address; CustomerID
        is set from JWT. Clients create their own; admins can also create for themselves
        only in this endpoint.
      parameters:
      - description: Address with optional coordinates
        in: body
        name: request
        required: true
        schema:
          properties:
            city:
              type: string
            coordinates:
              properties:
                latitude:
                  type: number
                longitude:
                  type: number
              type: object
            country:
              type: string
            exterior_number:
              type: string
            interior_number:
              type: string
            neighborhood:
              type: string
            postal_code:
              type: string
            state:
              type: string
            street:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/logistics-app_backend_internal_domain.Address'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create address (with coordinates)
      tags:
      - addresses
  /addresses/{id}:
    delete:
      description: Deletes address only if it is not referenced by any order. Owner
        or admin only.
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No content
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete address
      tags:
      - addresses
    get:
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/logistics-app_backend_internal_domain.Address'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get single address
      tags:
      - addresses
    put:
      consumes:
      - application/json
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      - description: Address update
        in: body
        name: request
        required: true
        schema:
          properties:
            city:
              type: string
            coordinates:
              properties:
                latitude:
                  type: number
                longitude:
                  type: number
              type: object
            country:
              type: string
            exterior_number:
              type: string
            interior_number:
              type: string
            is_active:
              type: boolean
            neighborhood:
              type: string
            postal_code:
              type: string
            state:
              type: string
            street:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/logistics-app_backend_internal_domain.Address'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update address (and coordinates)
      tags:
      - addresses
  /addresses/{id}/active:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      - description: Desired active state
        in: body
        name: request
        required: true
        schema:
          properties:
            active:
              type: boolean
          type: object
      responses:
        "204":
          description: No content
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Set Address active status
      tags:
      - addresses
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          properties:
            email:
              type: string
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            properties:
              token:
                type: string
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Not authorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login endpoint
      tags:
      - auth
  /orders:
    get:
      description: Clients see only their orders. Admins can see all orders by passing
        ?all=1.
      parameters:
      - description: If set to 1 and requester is admin, returns all orders; otherwise
          returns only own orders
        in: query
        name: all
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of orders with details
          schema:
            items:
              $ref: '#/definitions/logistics-app_backend_internal_domain.OrderListItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Creates a new order for authenticated user
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/logistics-app_backend_internal_domain.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Created order
          schema:
            $ref: '#/definitions/logistics-app_backend_internal_domain.Order'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create new order
      tags:
      - orders
  /orders/{id}:
    get:
      description: Returns the detailed information of a specific order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order detail
          schema:
            $ref: '#/definitions/logistics-app_backend_internal_domain.OrderDetail'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get order detail by ID
      tags:
      - orders
  /orders/{id}/status:
    patch:
      consumes:
      - application/json
      description: Updates the status of an order (admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: New status
        in: body
        name: status
        required: true
        schema:
          properties:
            status:
              type: string
          type: object
      responses:
        "204":
          description: No content
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update order status
      tags:
      - orders
  /orders/status:
    get:
      description: Returns all available order status constants
      produces:
      - application/json
      responses:
        "200":
          description: List of order status
          schema:
            items:
              properties:
                label:
                  type: string
                value:
                  type: string
              type: object
            type: array
      security:
      - BearerAuth: []
      summary: Get available order statuses
      tags:
      - orders
  /package-types:
    get:
      description: Returns package types. If ?all=1 and requester is admin, includes
        inactive; otherwise only active.
      parameters:
      - description: If set to 1 and requester is admin, returns active and inactive
        in: query
        name: all
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/logistics-app_backend_internal_domain.PackageType'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List package types
      tags:
      - package_types
  /package-types/{id}/active:
    patch:
      consumes:
      - application/json
      description: Admin only. Sets is_active true/false for a PackageType
      parameters:
      - description: PackageType ID
        in: path
        name: id
        required: true
        type: integer
      - description: Desired active state
        in: body
        name: request
        required: true
        schema:
          properties:
            active:
              type: boolean
          type: object
      responses:
        "204":
          description: No content
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Set PackageType active status
      tags:
      - package_types
  /users:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          properties:
            email:
              type: string
            full_name:
              type: string
            password:
              type: string
            phone:
              type: string
            role:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created user
          schema:
            $ref: '#/definitions/logistics-app_backend_internal_domain.User'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Register new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Deletes a user account (admin or own account only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No content
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      description: Returns user details by ID. Only admin or the user themself can
        access.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/logistics-app_backend_internal_domain.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
